-O que são bibliotecas e como elas podem ser usadas em aplicações web?
-Bibliotecas jQuery e D3JS. 
        {
            [https://www.npmjs.com/]
        }

LIBRARY VS. FRAMEWORK {
    →A library is like going to Ikea. You already have a home, but you need a bit of help with furniture. You don’t feel like making your own table from scratch. Ikea allows you to pick and choose different things to go in your home. You are in control.

    →A framework, on the other hand, is like building a model home. You have a set of blueprints and a few limited choices when it comes to architecture and design. Ultimately, the contractor and blueprint are in control. And they will let you know when and where you can provide your input.

    →When you use a library, you are in charge of the flow of the application. You are choosing when and where to call the library. When you use a framework, the framework is in charge of the flow. It provides some places for you to plug in your code, but it calls the code you plugged in as needed.
}

jQuery: {
    vantagens- acelera o processo de desenvolvimento, operações que exigiram vários comandos são simplificadas, é compatível com todos os navegadores, é extensível através de plugins
    instalação- pode ser usado por meio de um arquivo instalado localmente ou por meio do CDN 

        {
            funcionalidades: 
                núcleo básico, seleção de percurso, HTML & CSS, eventos, efeitos, AJAX, U.I., extensibilidade
        }

        seletores: não retornam os elementos HTML da página, mas um conjunto de objetos da própria jQuery que atendem aos critérios dos seletores. Esses critérios são os mesmos da CSS.
            {
                $('#ola').click( () => alert("Olá mundo!"));

                <button id="ola"> </button> 
            }
        eventos: também oferece uma alternativa à criação de eventos. No entanto é importante saber que o evento não é criado diretamente sobre o elemento HTML, mas sobre o conjunto resposta da seleção. 
            {
                *stopPropagation
                *o objeto evento
            }
        filtro: forma de reduzir o conjunto de elementos selecionados àqueles que atendam a uma determinada condição
        transformação: transformar um conjunto em outro por meio do método map()
}

d3: Data-Driven Documents {
    biblioteca para manipular o Dom a partir de um conjunto de dados, usa apenas os padrões Web e faz muitas das operações da jQuery. 

        {
            *objeto d3. tudo feito encima dele 
        }

        seleções: podemos usar select() ou selectAll(). Os seletores são os mesmos da CSS. 
        edição do doc, reordenação dos elementos,
}

SVG → scalable vector graphics

                            **JS AVANÇADA
objetos dos tipos: {
    cada tipo de dado tem um objeto correspondente que permite realizar operações mais sofisticadas
}

RegExp: {
    padrões de caracteres para, entre outras operações, buscar, comparar, validar e dividir strings

        →https://cheatography.com/davechild/cheat-sheets/regular-expressions/
}



*Carga dos scripts: {
    Quando usamos um arquivo de scripts externo, a carga dele e sua execução acontecem antes do resto do documento ser carregado

    o atributo "defer" segura a execução do script até a montagem do DOM
        {
            <script defer src="script.js"> </script>
        }

        /*onload = () => {

        }*/

    o atributo "async", script é carregado paralelamente e executado logo que esteja pront.    
        {
            <script async src="script.js"> </script>
        }

}

gerenciamento de erros: {
        toda operação em que um erro puder ocorrer deve ser escrita dentro de um bloco try...catch. Nesse bloco, uma sequência de operações é colocada dentro de um bloco try. Se, a qualquer momento, ocorrer um erro, esse bloco é encerrado e a execução passa para o bloco catch imediatamente. 
}

sintaxe de espalhamento: {
    allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.

    *A notação de desestruturação é mais simples do que a extração manual dos valores de um vetor
}

Propriedades {
    cada propriedade é chamada de propriedade de dados, porque armazena um dado

        ex. { prenome: 'José'}
    
    podemos criar algumas Propriedades na forma de função, mas que são usadas como prop. de dados (de acesso)

}

Closure: {
    é uma forma como uma função se lembra de seu contexto, mesmo que esse contexto esteja fechado. 
}

this: {
    se refere ao objeto pradrão dentro de um determinado contexto. No contexto global, ele se refere ao objeto global, que é o objeto Window
}

protótipo: {
    um objeto vira um protótipo para eu criar novos objetos. 
    Todo objeto em JS tem um protótipo que pode, MAS NÃO DEVE, ser acessado por meio da propriedade __proto__.

        criar um objeto a partir do outro = Object.create()
}

Immediately Invoked Function Expression (IIFE): {
    a JavaScript function that runs as soon as it is defined.
        → (function () {
            statements
           })();

    It is a design pattern which is also known as a Self-Executing Anonymous Function and contains two major parts:

        →The first is the anonymous function with lexical scope enclosed within the Grouping Operator (). This prevents accessing variables within the IIFE idiom as well as polluting the global scope.
        →The second part creates the immediately invoked function expression () through which the JavaScript engine will directly interpret the function.

    muito usadas pelas bibliotecas, geralmente, o código sad libs é muito sofisticado e se deseja evitar um acesso direto a seus métodos.

}

chamada assíncrona: {
    deve incluir a função a ser executada quando a operação for concluída. 

        let fnSucesso = function(resposta) {
            // faz alguma coisa com a resposta
        };
        let fnFalha = function(erro) {
            // trata o erro
        };
        fnAsync(dados, fnSucesso, fnFalha);

    um Promise é uma promessa de resposta. Essa estrutura busca padronizar a forma de criação de funções assíncronas. Resolve e Reject são os nomes comumente usados com promises para as funções de sucesso e de falha
        fnAsync(dados).then(fnResolve, fnReject);

    o objetivo é permitir a realização de algum processo lento, sem travar a interação com o usuário.


    a simplificação do código é feita por meio do uso do operador async
}

[.blob() → binary large object]
[CORS → Cross-Origin Resource Sharing; arquivos de outros domínios só podem ser acessados se o servidor aceitar requisições externas]

console.log(console.memory) → MemoryInfo